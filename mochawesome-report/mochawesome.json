{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-26T04:45:04.245Z",
    "end": "2023-10-26T04:45:07.473Z",
    "duration": 3228,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3a3f0cc5-ce7c-49b8-8d11-6d7f376fe74b",
      "title": "",
      "fullFile": "/Users/santuroy/Documents/TestWorkspace/mocha-api/deckofcards-js-mocha-supertest/tests/deckofcards.test.js",
      "file": "/tests/deckofcards.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "39b0ac4a-3c7f-4ed2-b405-44c1a8a483fd",
          "title": "deck of cards",
          "fullFile": "/Users/santuroy/Documents/TestWorkspace/mocha-api/deckofcards-js-mocha-supertest/tests/deckofcards.test.js",
          "file": "/tests/deckofcards.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "verify host is up",
              "fullTitle": "deck of cards verify host is up",
              "timedOut": false,
              "duration": 265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.get(\"\");\nexpect(response.status).to.eql(200);",
              "err": {},
              "uuid": "ff9c3f90-aa53-4b38-ac47-136952f42e93",
              "parentUUID": "39b0ac4a-3c7f-4ed2-b405-44c1a8a483fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get a new deck > shuffle the deck > draw from deck > check if anyone has blackjack",
              "fullTitle": "deck of cards get a new deck > shuffle the deck > draw from deck > check if anyone has blackjack",
              "timedOut": false,
              "duration": 2960,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Get a new deck\nconst responseGetNewDeck = await request.get(\"/api/deck/new/\");\nexpect(responseGetNewDeck.status).to.eql(200);\ndeckId = responseGetNewDeck.body.deck_id;\nconsole.log(\"New Deck_Id :\", deckId);\n// Shuffle the deck\nconst responseShuffleGivenDeck = await request.get(\n  `/api/deck/${deckId}/shuffle/`\n);\nexpect(responseShuffleGivenDeck.status).to.eql(200);\n// deckId = responseGetNewDeck.body.deck_id;\n// console.log(\"New Deck_Id :\", deckId);\n// Draw from deck\nlet playerCount = 2;\nlet drawCount = 3;\nlet playerCards = [];\nfor (let i = 0; i < playerCount; i++) {\n  for (let j = 0; j < drawCount; j++) {\n    let responseDrawDeck = await request.get(\n      `/api/deck/${deckId}/draw/?count=1`\n    );\n    playerCards[i] =\n      playerCards[i] !== undefined\n        ? playerCards[i] + responseDrawDeck.body.cards[0].value + \"|\"\n        : responseDrawDeck.body.cards[0].value + \"|\";\n  }\n  console.log(\n    `Cards in hand of Player#${i + 1}: `,\n    playerCards[i].toLocaleString()\n  );\n  // Check for blackjack\n  if (\n    playerCards[i].includes(\"ACE\") &&\n    (playerCards[i].includes(\"JACK\") ||\n      playerCards[i].includes(\"KING\") ||\n      playerCards[i].includes(\"QUEEN\") ||\n      playerCards[i].includes(\"10\"))\n  ) {\n    console.log(`Player: ${i + 1} has blackjack ðŸ˜€`);\n  }\n}",
              "err": {},
              "uuid": "69e3a9fa-037f-4979-9827-683345bd7ec0",
              "parentUUID": "39b0ac4a-3c7f-4ed2-b405-44c1a8a483fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff9c3f90-aa53-4b38-ac47-136952f42e93",
            "69e3a9fa-037f-4979-9827-683345bd7ec0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3225,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}